import smartclass.ui.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import context.arch.storage.Attributes;
import context.arch.widget.Widget;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.Enumeration;
import javax.swing.AbstractAction;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import smartclass.Professor;
import java.util.Map;


privileged aspect AspectJMLRac_smartclass_ui_ProfessorUI409d3ba6_1be3_4596_890a_ae5df012c5f4 {

 declare precedence: AspectJMLRac_*, *;














  /** Generated by AspectJML to check the exceptional postcondition of
   * method ProfessorUI. */
  after (final smartclass.ui.ProfessorUI object$rac) throwing (Throwable rac$e) :
     execution(smartclass.ui.ProfessorUI.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.ProfessorUI.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.<init> regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.ProfessorUI.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getInstance. */
   after () returning (final smartclass.ui.ProfessorUI rac$result) :
     execution(static smartclass.ui.ProfessorUI smartclass.ui.ProfessorUI.getInstance()) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ProfessorUI.getInstance regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 58 (smartclass.ui.ProfessorUI.java:58)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, "smartclass.ui.ProfessorUI.getInstance()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getInstance. */
   after () throwing (Throwable rac$e) :
     execution(static smartclass.ui.ProfessorUI smartclass.ui.ProfessorUI.getInstance()) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.ProfessorUI.getInstance()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getInstance\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.getInstance regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 58 (smartclass.ui.ProfessorUI.java:58)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.ProfessorUI.getInstance()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getSelectedButtonText. */
  after (final smartclass.ui.ProfessorUI object$rac, final ButtonGroup buttonGroup) returning (final java.lang.String rac$result) :
     (execution(java.lang.String smartclass.ui.ProfessorUI.getSelectedButtonText(ButtonGroup))) && this(object$rac) && args(buttonGroup) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ProfessorUI.getSelectedButtonText regarding specifications at \nFile \"smartclass.ui.ProfessorUI.java\", line 61, character 27 (smartclass.ui.ProfessorUI.java:61), and \nby method smartclass.ui.ProfessorUI.getSelectedButtonText regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 70 (smartclass.ui.ProfessorUI.java:70)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getSelectedButtonText regarding specifications at \nline 61, character 27 (smartclass.ui.ProfessorUI.java:61)\nCaused by: ";
       if (((buttonGroup != null) && (buttonGroup != null))){
         try {
           rac$b = ((rac$result != null) && ((rac$result != "") || (rac$result == null)));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getSelectedButtonText(ButtonGroup)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getSelectedButtonText. */
  after (final smartclass.ui.ProfessorUI object$rac, final ButtonGroup buttonGroup) throwing (Throwable rac$e) :
     (execution(java.lang.String smartclass.ui.ProfessorUI.getSelectedButtonText(ButtonGroup))) && this(object$rac) && args(buttonGroup) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getSelectedButtonText(ButtonGroup)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((buttonGroup != null) && (buttonGroup != null))) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getSelectedButtonText\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.getSelectedButtonText regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 70 (smartclass.ui.ProfessorUI.java:70)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getSelectedButtonText(ButtonGroup)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method getProfessorOfTheTime. */
  after (final smartclass.ui.ProfessorUI object$rac, final int time) returning (final java.lang.String rac$result) :
     (execution(java.lang.String smartclass.ui.ProfessorUI.getProfessorOfTheTime(int))) && this(object$rac) && args(time) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ProfessorUI.getProfessorOfTheTime regarding specifications at \nFile \"smartclass.ui.ProfessorUI.java\", line 113, character 27 (smartclass.ui.ProfessorUI.java:113), and \nby method smartclass.ui.ProfessorUI.getProfessorOfTheTime regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 125 (smartclass.ui.ProfessorUI.java:125)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getProfessorOfTheTime regarding specifications at \nline 113, character 27 (smartclass.ui.ProfessorUI.java:113)\nCaused by: ";
       if (((time >= -1) && (time <= 3))){
         try {
           rac$b = ((rac$result != null) && (rac$result != null));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getProfessorOfTheTime(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getProfessorOfTheTime. */
  after (final smartclass.ui.ProfessorUI object$rac, final int time) throwing (Throwable rac$e) :
     (execution(java.lang.String smartclass.ui.ProfessorUI.getProfessorOfTheTime(int))) && this(object$rac) && args(time) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getProfessorOfTheTime(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((time >= -1) && (time <= 3))) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getProfessorOfTheTime\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.getProfessorOfTheTime regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 125 (smartclass.ui.ProfessorUI.java:125)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getProfessorOfTheTime(int)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method initComponents. */
  after (final smartclass.ui.ProfessorUI object$rac) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ProfessorUI.initComponents())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.initComponents\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.initComponents regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jButton1MouseClicked. */
  after (final smartclass.ui.ProfessorUI object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ProfessorUI.jButton1MouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton1MouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.jButton1MouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.jButton1MouseClicked regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton1MouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jButton2MouseClicked. */
  after (final smartclass.ui.ProfessorUI object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ProfessorUI.jButton2MouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton2MouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.jButton2MouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.jButton2MouseClicked regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton2MouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jButton3MouseClicked. */
  after (final smartclass.ui.ProfessorUI object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ProfessorUI.jButton3MouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton3MouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.jButton3MouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.jButton3MouseClicked regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton3MouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jButton4MouseClicked. */
  after (final smartclass.ui.ProfessorUI object$rac, final java.awt.event.MouseEvent evt) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ProfessorUI.jButton4MouseClicked(java.awt.event.MouseEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton4MouseClicked(java.awt.event.MouseEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.jButton4MouseClicked\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.jButton4MouseClicked regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton4MouseClicked(java.awt.event.MouseEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method jSlider1StateChanged. */
  after (final smartclass.ui.ProfessorUI object$rac, final javax.swing.event.ChangeEvent evt) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ProfessorUI.jSlider1StateChanged(javax.swing.event.ChangeEvent))) && this(object$rac) && args(evt) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jSlider1StateChanged(javax.swing.event.ChangeEvent)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.jSlider1StateChanged\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.jSlider1StateChanged regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jSlider1StateChanged(javax.swing.event.ChangeEvent)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method main. */
   after (final java.lang.String[] args) throwing (Throwable rac$e) :
     execution(static void smartclass.ui.ProfessorUI.main(java.lang.String[])) && args(args) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.ProfessorUI.main(java.lang.String[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.main\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.main regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.ProfessorUI.main(java.lang.String[])", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getCurOpen. */
  after (final smartclass.ui.ProfessorUI object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String smartclass.ui.ProfessorUI.getCurOpen())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ProfessorUI.getCurOpen regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 781 (smartclass.ui.ProfessorUI.java:781)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCurOpen()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getCurOpen. */
  after (final smartclass.ui.ProfessorUI object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String smartclass.ui.ProfessorUI.getCurOpen())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCurOpen()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getCurOpen\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.getCurOpen regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 781 (smartclass.ui.ProfessorUI.java:781)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getCurOpen()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setCurOpen. */
  after (final smartclass.ui.ProfessorUI object$rac, final java.lang.String curOpen) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ProfessorUI.setCurOpen(java.lang.String))) && this(object$rac) && args(curOpen) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCurOpen(java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.setCurOpen\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.setCurOpen regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCurOpen(java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class ProfessorUI. */
  before (final smartclass.ui.ProfessorUI object$rac) :
     (execution(!static * smartclass.ui.ProfessorUI+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"ProfessorUI.java\"> regarding code at \nFile \"ProfessorUI.java\"\nnon_null for field 'curOpen' <File \"smartclass.ui.ProfessorUI.java\", line 32, character 49 (smartclass.ui.ProfessorUI.java:32)>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"ProfessorUI.java\"> regarding code at \nFile \"ProfessorUI.java\"\nnon_null for field 'curOpen' <File \"smartclass.ui.ProfessorUI.java\", line 32, character 49 (smartclass.ui.ProfessorUI.java:32)>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.curOpen != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method getSelectedButtonText. */
  before (final smartclass.ui.ProfessorUI object$rac, final ButtonGroup buttonGroup) :
     (execution(java.lang.String smartclass.ui.ProfessorUI.getSelectedButtonText(ButtonGroup))) && 
     this(object$rac) && args(buttonGroup) {
       String preErrorMsg = "by method smartclass.ui.ProfessorUI.getSelectedButtonText regarding specifications at \nFile \"smartclass.ui.ProfessorUI.java\", [spec-case]: line 60, character 32 (smartclass.ui.ProfessorUI.java:60), and \nby method smartclass.ui.ProfessorUI.getSelectedButtonText regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 70 (smartclass.ui.ProfessorUI.java:70)"+", when \n"+"\t\'buttonGroup\' is "+buttonGroup;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getSelectedButtonText regarding specifications at \n[spec-case]: line 60, character 32 (smartclass.ui.ProfessorUI.java:60)"+", when \n"+"\t\'buttonGroup\' is "+buttonGroup+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((buttonGroup != null) && (buttonGroup != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getSelectedButtonText(ButtonGroup)");

     }

  /** Generated by AspectJML to check the precondition of
   * method getProfessorOfTheTime. */
  before (final smartclass.ui.ProfessorUI object$rac, final int time) :
     (execution(java.lang.String smartclass.ui.ProfessorUI.getProfessorOfTheTime(int))) && 
     this(object$rac) && args(time) {
       String preErrorMsg = "by method smartclass.ui.ProfessorUI.getProfessorOfTheTime regarding specifications at \nFile \"smartclass.ui.ProfessorUI.java\", [spec-case]: line 112, character 25 (smartclass.ui.ProfessorUI.java:112), and \nby method smartclass.ui.ProfessorUI.getProfessorOfTheTime regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 125 (smartclass.ui.ProfessorUI.java:125)"+", when \n"+"\t\'time\' is "+time;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getProfessorOfTheTime regarding specifications at \n[spec-case]: line 112, character 25 (smartclass.ui.ProfessorUI.java:112)"+", when \n"+"\t\'time\' is "+time+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((time >= -1) && (time <= 3));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getProfessorOfTheTime(int)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jButton1MouseClicked. */
  before (final smartclass.ui.ProfessorUI object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void smartclass.ui.ProfessorUI.jButton1MouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method smartclass.ui.ProfessorUI.jButton1MouseClicked regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton1MouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jButton2MouseClicked. */
  before (final smartclass.ui.ProfessorUI object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void smartclass.ui.ProfessorUI.jButton2MouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method smartclass.ui.ProfessorUI.jButton2MouseClicked regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton2MouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jButton3MouseClicked. */
  before (final smartclass.ui.ProfessorUI object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void smartclass.ui.ProfessorUI.jButton3MouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method smartclass.ui.ProfessorUI.jButton3MouseClicked regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton3MouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jButton4MouseClicked. */
  before (final smartclass.ui.ProfessorUI object$rac, final java.awt.event.MouseEvent evt) :
     (execution(void smartclass.ui.ProfessorUI.jButton4MouseClicked(java.awt.event.MouseEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method smartclass.ui.ProfessorUI.jButton4MouseClicked regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jButton4MouseClicked(java.awt.event.MouseEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method jSlider1StateChanged. */
  before (final smartclass.ui.ProfessorUI object$rac, final javax.swing.event.ChangeEvent evt) :
     (execution(void smartclass.ui.ProfessorUI.jSlider1StateChanged(javax.swing.event.ChangeEvent))) && 
     this(object$rac) && args(evt) {
       String preErrorMsg = "by method smartclass.ui.ProfessorUI.jSlider1StateChanged regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+", when \n"+"\t\'evt\' is "+evt+ ", when \n"+"\t\'evt\' is "+evt;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (evt != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".jSlider1StateChanged(javax.swing.event.ChangeEvent)");

     }

  /** Generated by AspectJML to check the precondition of
   * method main. */
  before (final java.lang.String[] args) :
     execution(static void smartclass.ui.ProfessorUI.main(java.lang.String[])) && args(args) {
       String preErrorMsg = "by method smartclass.ui.ProfessorUI.main regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+", when \n"+"\t\'args\' is "+args+ ", when \n"+"\t\'args\' is "+args;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (args != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.ui.ProfessorUI.main(java.lang.String[])");

     }

  /** Generated by AspectJML to check the precondition of
   * method setCurOpen. */
  before (final smartclass.ui.ProfessorUI object$rac, final java.lang.String curOpen) :
     (execution(void smartclass.ui.ProfessorUI.setCurOpen(java.lang.String))) && 
     this(object$rac) && args(curOpen) {
       String preErrorMsg = "by method smartclass.ui.ProfessorUI.setCurOpen regarding code at \nFile \"smartclass.ui.ProfessorUI.java\""+", when \n"+"\t\'curOpen\' is "+curOpen+ ", when \n"+"\t\'curOpen\' is "+curOpen;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (curOpen != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setCurOpen(java.lang.String)");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method timeToInt. */
  int around (final smartclass.ui.ProfessorUI object$rac, final java.lang.String time) :
     (execution(int smartclass.ui.ProfessorUI.timeToInt(java.lang.String)))
     && this(object$rac) && args(time) {
      boolean rac$b = true;
      int rac$result = 0;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((time != null) && (time.length() > 5));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method smartclass.ui.ProfessorUI.timeToInt regarding specifications at \nFile \"smartclass.ui.ProfessorUI.java\", [spec-case]: line 72, character 31 (smartclass.ui.ProfessorUI.java:72), and \nby method smartclass.ui.ProfessorUI.timeToInt regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 90 (smartclass.ui.ProfessorUI.java:90)"+", when \n"+"\t\'time\' is "+time;
      String evalPreErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.timeToInt regarding specifications at \n[spec-case]: line 72, character 31 (smartclass.ui.ProfessorUI.java:72)"+", when \n"+"\t\'time\' is "+time+"\nCaused by: ";
      try {
        rac$b = ((time != null) && (time.length() > 5));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".timeToInt(java.lang.String)");
      try {
        rac$result = proceed(object$rac, time);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method smartclass.ui.ProfessorUI.timeToInt regarding specifications at \nFile \"smartclass.ui.ProfessorUI.java\", line 73, character 27 (smartclass.ui.ProfessorUI.java:73), and \nby method smartclass.ui.ProfessorUI.timeToInt regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 90 (smartclass.ui.ProfessorUI.java:90)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.timeToInt regarding specifications at \nline 73, character 27 (smartclass.ui.ProfessorUI.java:73)\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = ((rac$result >= 0) && (rac$result <= 3));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".timeToInt(java.lang.String)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.timeToInt\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.timeToInt regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 90 (smartclass.ui.ProfessorUI.java:90)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".timeToInt(java.lang.String)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".timeToInt(java.lang.String)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method getProfessorAttributes. */
  smartclass.Professor around (final smartclass.ui.ProfessorUI object$rac, final java.lang.String name) :
     (execution(smartclass.Professor smartclass.ui.ProfessorUI.getProfessorAttributes(java.lang.String)))
     && this(object$rac) && args(name) {
      boolean rac$b = true;
      smartclass.Professor rac$result = null;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((name != null) && (name.length() > 1));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method smartclass.ui.ProfessorUI.getProfessorAttributes regarding specifications at \nFile \"smartclass.ui.ProfessorUI.java\", [spec-case]: line 92, character 31 (smartclass.ui.ProfessorUI.java:92), and \nby method smartclass.ui.ProfessorUI.getProfessorAttributes regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 110 (smartclass.ui.ProfessorUI.java:110)"+", when \n"+"\t\'name\' is "+name;
      String evalPreErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getProfessorAttributes regarding specifications at \n[spec-case]: line 92, character 31 (smartclass.ui.ProfessorUI.java:92)"+", when \n"+"\t\'name\' is "+name+"\nCaused by: ";
      try {
        rac$b = ((name != null) && (name.length() > 1));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getProfessorAttributes(java.lang.String)");
      try {
        rac$result = proceed(object$rac, name);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method smartclass.ui.ProfessorUI.getProfessorAttributes regarding specifications at \nFile \"smartclass.ui.ProfessorUI.java\", line 93, character 35 (smartclass.ui.ProfessorUI.java:93), and \nby method smartclass.ui.ProfessorUI.getProfessorAttributes regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 110 (smartclass.ui.ProfessorUI.java:110)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getProfessorAttributes regarding specifications at \nline 93, character 35 (smartclass.ui.ProfessorUI.java:93)\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = ((rac$result != null) && (rac$result instanceof smartclass.Professor || (rac$result == null)));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getProfessorAttributes(java.lang.String)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ProfessorUI.java\" by method smartclass.ui.ProfessorUI.getProfessorAttributes\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ProfessorUI.getProfessorAttributes regarding code at \nFile \"smartclass.ui.ProfessorUI.java\", line 110 (smartclass.ui.ProfessorUI.java:110)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getProfessorAttributes(java.lang.String)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getProfessorAttributes(java.lang.String)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
      return rac$result;
  	}

  /** Generated by AspectJML to check non-static invariants of 
   * class ProfessorUI. */
  after (final smartclass.ui.ProfessorUI object$rac) :
     (execution(!static * smartclass.ui.ProfessorUI+.*(..)) || 
       execution(smartclass.ui.ProfessorUI+.new(..))) && 
     !execution(void smartclass.ui.ProfessorUI.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"ProfessorUI.java\"> regarding code at \nFile \"ProfessorUI.java\"\nnon_null for field 'curOpen' <File \"smartclass.ui.ProfessorUI.java\", line 32, character 49 (smartclass.ui.ProfessorUI.java:32)>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
         String evalErrorMsg = "Invalid expression in \"@post <File \"ProfessorUI.java\"> regarding code at \nFile \"ProfessorUI.java\"\nnon_null for field 'curOpen' <File \"smartclass.ui.ProfessorUI.java\", line 32, character 49 (smartclass.ui.ProfessorUI.java:32)>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.curOpen != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final smartclass.ui.ProfessorUI object$rac): (execution( * smartclass.ui.ProfessorUI..*+.*(..))
            || execution(smartclass.ui.ProfessorUI..*+.new(..))
            || execution( * smartclass.ui.ProfessorUI+.*(..))
            || execution(smartclass.ui.ProfessorUI+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * smartclass.ui.ProfessorUI..*+.*(..))
            || execution(smartclass.ui.ProfessorUI..*+.new(..))
            || execution( * smartclass.ui.ProfessorUI+.*(..))
            || execution(smartclass.ui.ProfessorUI+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_ProfessorUI{
    before(): (execution( * smartclass.ui.ProfessorUI..*+.*(..))
            || execution(smartclass.ui.ProfessorUI..*+.new(..))
            || execution( * smartclass.ui.ProfessorUI+.*(..))
            || execution(smartclass.ui.ProfessorUI+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
