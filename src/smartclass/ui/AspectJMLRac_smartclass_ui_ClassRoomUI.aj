import smartclass.ui.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.Map;


privileged aspect AspectJMLRac_smartclass_ui_ClassRoomUI8bd90413_c54d_4472_af7e_9a6312db8314 {

 declare precedence: AspectJMLRac_*, *;













  /** Generated by AspectJML to check the exceptional postcondition of
   * method ClassRoomUI. */
  after (final smartclass.ui.ClassRoomUI object$rac) throwing (Throwable rac$e) :
     execution(smartclass.ui.ClassRoomUI.new(  )) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.ClassRoomUI.<init>()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.<init> regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.ClassRoomUI.<init>()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getInstance. */
   after () returning (final smartclass.ui.ClassRoomUI rac$result) :
     execution(static smartclass.ui.ClassRoomUI smartclass.ui.ClassRoomUI.getInstance()) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.getInstance regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\", line 31 (smartclass.ui.ClassRoomUI.java:31)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, "smartclass.ui.ClassRoomUI.getInstance()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getInstance. */
   after () throwing (Throwable rac$e) :
     execution(static smartclass.ui.ClassRoomUI smartclass.ui.ClassRoomUI.getInstance()) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.ClassRoomUI.getInstance()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.getInstance\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.getInstance regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\", line 31 (smartclass.ui.ClassRoomUI.java:31)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.ClassRoomUI.getInstance()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method lightOn. */
  after (final smartclass.ui.ClassRoomUI object$rac) returning () :
     (execution(void smartclass.ui.ClassRoomUI.lightOn())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.lightOn regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", line 34, character 122 (smartclass.ui.ClassRoomUI.java:34), and \nby method smartclass.ui.ClassRoomUI.lightOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.lightOn regarding specifications at \nline 34, character 122 (smartclass.ui.ClassRoomUI.java:34)\nCaused by: ";
       if (true){
         try {
           rac$b = object$rac.jLabel1.getIcon().toString().equals(((java.lang.Object) (object$rac.getClass().getResource("/smartclass/ui/imagens/sala_luz_ligada.png"))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".lightOn()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method lightOn. */
  after (final smartclass.ui.ClassRoomUI object$rac) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.lightOn())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".lightOn()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.lightOn\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.lightOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".lightOn()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method lightOff. */
  after (final smartclass.ui.ClassRoomUI object$rac) returning () :
     (execution(void smartclass.ui.ClassRoomUI.lightOff())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.lightOff regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", line 43, character 125 (smartclass.ui.ClassRoomUI.java:43), and \nby method smartclass.ui.ClassRoomUI.lightOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.lightOff regarding specifications at \nline 43, character 125 (smartclass.ui.ClassRoomUI.java:43)\nCaused by: ";
       if (true){
         try {
           rac$b = object$rac.jLabel1.getIcon().toString().equals(((java.lang.Object) (object$rac.getClass().getResource("/smartclass/ui/imagens/sala_luz_desligada.png"))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".lightOff()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method lightOff. */
  after (final smartclass.ui.ClassRoomUI object$rac) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.lightOff())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".lightOff()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.lightOff\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.lightOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".lightOff()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method projectorOn. */
  after (final smartclass.ui.ClassRoomUI object$rac) returning () :
     (execution(void smartclass.ui.ClassRoomUI.projectorOn())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.projectorOn regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", line 52, character 122 (smartclass.ui.ClassRoomUI.java:52), and \nby method smartclass.ui.ClassRoomUI.projectorOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.projectorOn regarding specifications at \nline 52, character 122 (smartclass.ui.ClassRoomUI.java:52)\nCaused by: ";
       if (true){
         try {
           rac$b = (object$rac.jLabel3.getIcon().toString().equals(((java.lang.Object) (object$rac.getClass().getResource("/smartclass/ui/imagens/projetor_ligado.png")))) && object$rac.jLabel4.isVisible());
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".projectorOn()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method projectorOn. */
  after (final smartclass.ui.ClassRoomUI object$rac) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.projectorOn())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".projectorOn()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.projectorOn\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.projectorOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".projectorOn()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method projectorOff. */
  after (final smartclass.ui.ClassRoomUI object$rac) returning () :
     (execution(void smartclass.ui.ClassRoomUI.projectorOff())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.projectorOff regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", line 61, character 125 (smartclass.ui.ClassRoomUI.java:61), and \nby method smartclass.ui.ClassRoomUI.projectorOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.projectorOff regarding specifications at \nline 61, character 125 (smartclass.ui.ClassRoomUI.java:61)\nCaused by: ";
       if (true){
         try {
           rac$b = (object$rac.jLabel3.getIcon().toString().equals(((java.lang.Object) (object$rac.getClass().getResource("/smartclass/ui/imagens/projetor_desligado.png")))) && !(object$rac.jLabel4.isVisible()));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".projectorOff()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method projectorOff. */
  after (final smartclass.ui.ClassRoomUI object$rac) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.projectorOff())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".projectorOff()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.projectorOff\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.projectorOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".projectorOff()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method computerOn. */
  after (final smartclass.ui.ClassRoomUI object$rac) returning () :
     (execution(void smartclass.ui.ClassRoomUI.computerOn())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.computerOn regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", line 72, character 124 (smartclass.ui.ClassRoomUI.java:72), and \nby method smartclass.ui.ClassRoomUI.computerOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.computerOn regarding specifications at \nline 72, character 124 (smartclass.ui.ClassRoomUI.java:72)\nCaused by: ";
       if (true){
         try {
           rac$b = object$rac.jLabel2.getIcon().toString().equals(((java.lang.Object) (object$rac.getClass().getResource("/smartclass/ui/imagens/computador_ligado.png"))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".computerOn()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method computerOn. */
  after (final smartclass.ui.ClassRoomUI object$rac) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.computerOn())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".computerOn()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.computerOn\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.computerOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".computerOn()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method computerOff. */
  after (final smartclass.ui.ClassRoomUI object$rac) returning () :
     (execution(void smartclass.ui.ClassRoomUI.computerOff())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.computerOff regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", line 79, character 127 (smartclass.ui.ClassRoomUI.java:79), and \nby method smartclass.ui.ClassRoomUI.computerOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.computerOff regarding specifications at \nline 79, character 127 (smartclass.ui.ClassRoomUI.java:79)\nCaused by: ";
       if (true){
         try {
           rac$b = object$rac.jLabel2.getIcon().toString().equals(((java.lang.Object) (object$rac.getClass().getResource("/smartclass/ui/imagens/computador_desligado.png"))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".computerOff()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method computerOff. */
  after (final smartclass.ui.ClassRoomUI object$rac) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.computerOff())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".computerOff()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.computerOff\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.computerOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".computerOff()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method airOn. */
  after (final smartclass.ui.ClassRoomUI object$rac, final int temp) returning () :
     (execution(void smartclass.ui.ClassRoomUI.airOn(int))) && this(object$rac) && args(temp) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.airOn regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", line 88, character 116 (smartclass.ui.ClassRoomUI.java:88), and \nby method smartclass.ui.ClassRoomUI.airOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.airOn regarding specifications at \nline 88, character 116 (smartclass.ui.ClassRoomUI.java:88)\nCaused by: ";
       if (((temp >= 0) && (temp <= 30))){
         try {
           rac$b = object$rac.jLabel5.getIcon().toString().equals(((java.lang.Object) (object$rac.getClass().getResource("/smartclass/ui/imagens/ar_ligado.png"))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airOn(int)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method airOn. */
  after (final smartclass.ui.ClassRoomUI object$rac, final int temp) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.airOn(int))) && this(object$rac) && args(temp) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airOn(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((temp >= 0) && (temp <= 30))) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.airOn\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.airOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airOn(int)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method airOff. */
  after (final smartclass.ui.ClassRoomUI object$rac) returning () :
     (execution(void smartclass.ui.ClassRoomUI.airOff())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.airOff regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", line 96, character 119 (smartclass.ui.ClassRoomUI.java:96), and \nby method smartclass.ui.ClassRoomUI.airOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.airOff regarding specifications at \nline 96, character 119 (smartclass.ui.ClassRoomUI.java:96)\nCaused by: ";
       if (true){
         try {
           rac$b = (object$rac.jLabel5.getIcon().toString().equals(((java.lang.Object) (object$rac.getClass().getResource("/smartclass/ui/imagens/ar_desligado.png")))) && object$rac.jLabel6.getText().equals(((java.lang.Object) (""))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airOff()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method airOff. */
  after (final smartclass.ui.ClassRoomUI object$rac) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.airOff())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airOff()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.airOff\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.airOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airOff()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method airTemp. */
  after (final smartclass.ui.ClassRoomUI object$rac, final int temp) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.airTemp(int))) && this(object$rac) && args(temp) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airTemp(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && ((temp >= 0) && (temp <= 30))) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.airTemp\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.airTemp regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airTemp(int)", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method initComponents. */
  after (final smartclass.ui.ClassRoomUI object$rac) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.ClassRoomUI.initComponents())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.initComponents\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.initComponents regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".initComponents()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method main. */
   after (final java.lang.String[] args) throwing (Throwable rac$e) :
     execution(static void smartclass.ui.ClassRoomUI.main(java.lang.String[])) && args(args) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.ClassRoomUI.main(java.lang.String[])");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.main\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.main regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.ClassRoomUI.main(java.lang.String[])", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class ClassRoomUI. */
  before (final smartclass.ui.ClassRoomUI object$rac) :
     (execution(!static * smartclass.ui.ClassRoomUI+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"ClassRoomUI.java\"> regarding specifications at \nFile \"ClassRoomUI.java\", line 27, character 25 (ClassRoomUI.java:27), when \n\tnullable field 'this.time' is "+object$rac.time;
         String evalErrorMsg = "Invalid expression in \"@pre <File \"ClassRoomUI.java\"> regarding specifications at \nFile \"ClassRoomUI.java\", line 27, character 25 (ClassRoomUI.java:27), when \n\tnullable field 'this.time' is "+object$rac.time+"\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((-1 <= object$rac.time) && (object$rac.time <= 3));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method lightOn. */
  before (final smartclass.ui.ClassRoomUI object$rac) :
     (execution(void smartclass.ui.ClassRoomUI.lightOn())) && 
     this(object$rac) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.lightOn regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 33, character 19 (smartclass.ui.ClassRoomUI.java:33), and \nby method smartclass.ui.ClassRoomUI.lightOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.lightOn regarding specifications at \n[spec-case]: line 33, character 19 (smartclass.ui.ClassRoomUI.java:33)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".lightOn()");

     }

  /** Generated by AspectJML to check the precondition of
   * method lightOff. */
  before (final smartclass.ui.ClassRoomUI object$rac) :
     (execution(void smartclass.ui.ClassRoomUI.lightOff())) && 
     this(object$rac) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.lightOff regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 42, character 19 (smartclass.ui.ClassRoomUI.java:42), and \nby method smartclass.ui.ClassRoomUI.lightOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.lightOff regarding specifications at \n[spec-case]: line 42, character 19 (smartclass.ui.ClassRoomUI.java:42)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".lightOff()");

     }

  /** Generated by AspectJML to check the precondition of
   * method projectorOn. */
  before (final smartclass.ui.ClassRoomUI object$rac) :
     (execution(void smartclass.ui.ClassRoomUI.projectorOn())) && 
     this(object$rac) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.projectorOn regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 51, character 19 (smartclass.ui.ClassRoomUI.java:51), and \nby method smartclass.ui.ClassRoomUI.projectorOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.projectorOn regarding specifications at \n[spec-case]: line 51, character 19 (smartclass.ui.ClassRoomUI.java:51)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".projectorOn()");

     }

  /** Generated by AspectJML to check the precondition of
   * method projectorOff. */
  before (final smartclass.ui.ClassRoomUI object$rac) :
     (execution(void smartclass.ui.ClassRoomUI.projectorOff())) && 
     this(object$rac) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.projectorOff regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 60, character 19 (smartclass.ui.ClassRoomUI.java:60), and \nby method smartclass.ui.ClassRoomUI.projectorOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.projectorOff regarding specifications at \n[spec-case]: line 60, character 19 (smartclass.ui.ClassRoomUI.java:60)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".projectorOff()");

     }

  /** Generated by AspectJML to check the precondition of
   * method computerOn. */
  before (final smartclass.ui.ClassRoomUI object$rac) :
     (execution(void smartclass.ui.ClassRoomUI.computerOn())) && 
     this(object$rac) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.computerOn regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 71, character 19 (smartclass.ui.ClassRoomUI.java:71), and \nby method smartclass.ui.ClassRoomUI.computerOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.computerOn regarding specifications at \n[spec-case]: line 71, character 19 (smartclass.ui.ClassRoomUI.java:71)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".computerOn()");

     }

  /** Generated by AspectJML to check the precondition of
   * method computerOff. */
  before (final smartclass.ui.ClassRoomUI object$rac) :
     (execution(void smartclass.ui.ClassRoomUI.computerOff())) && 
     this(object$rac) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.computerOff regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 78, character 19 (smartclass.ui.ClassRoomUI.java:78), and \nby method smartclass.ui.ClassRoomUI.computerOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.computerOff regarding specifications at \n[spec-case]: line 78, character 19 (smartclass.ui.ClassRoomUI.java:78)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".computerOff()");

     }

  /** Generated by AspectJML to check the precondition of
   * method airOn. */
  before (final smartclass.ui.ClassRoomUI object$rac, final int temp) :
     (execution(void smartclass.ui.ClassRoomUI.airOn(int))) && 
     this(object$rac) && args(temp) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.airOn regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 86, character 25 (smartclass.ui.ClassRoomUI.java:86), and \nby method smartclass.ui.ClassRoomUI.airOn regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+", when \n"+"\t\'temp\' is "+temp;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.airOn regarding specifications at \n[spec-case]: line 86, character 25 (smartclass.ui.ClassRoomUI.java:86)"+", when \n"+"\t\'temp\' is "+temp+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((temp >= 0) && (temp <= 30));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airOn(int)");

     }

  /** Generated by AspectJML to check the precondition of
   * method airOff. */
  before (final smartclass.ui.ClassRoomUI object$rac) :
     (execution(void smartclass.ui.ClassRoomUI.airOff())) && 
     this(object$rac) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.airOff regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 95, character 19 (smartclass.ui.ClassRoomUI.java:95), and \nby method smartclass.ui.ClassRoomUI.airOff regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.airOff regarding specifications at \n[spec-case]: line 95, character 19 (smartclass.ui.ClassRoomUI.java:95)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airOff()");

     }

  /** Generated by AspectJML to check the precondition of
   * method airTemp. */
  before (final smartclass.ui.ClassRoomUI object$rac, final int temp) :
     (execution(void smartclass.ui.ClassRoomUI.airTemp(int))) && 
     this(object$rac) && args(temp) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.airTemp regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 103, character 25 (smartclass.ui.ClassRoomUI.java:103), and \nby method smartclass.ui.ClassRoomUI.airTemp regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+", when \n"+"\t\'temp\' is "+temp;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.airTemp regarding specifications at \n[spec-case]: line 103, character 25 (smartclass.ui.ClassRoomUI.java:103)"+", when \n"+"\t\'temp\' is "+temp+"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((temp >= 0) && (temp <= 30));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".airTemp(int)");

     }

  /** Generated by AspectJML to check the precondition of
   * method main. */
  before (final java.lang.String[] args) :
     execution(static void smartclass.ui.ClassRoomUI.main(java.lang.String[])) && args(args) {
       String preErrorMsg = "by method smartclass.ui.ClassRoomUI.main regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+", when \n"+"\t\'args\' is "+args+ ", when \n"+"\t\'args\' is "+args;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (args != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.ui.ClassRoomUI.main(java.lang.String[])");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method theProfessor. */
  void around (final smartclass.ui.ClassRoomUI object$rac, final java.lang.String p) :
     (execution(void smartclass.ui.ClassRoomUI.theProfessor(java.lang.String)))
     && this(object$rac) && args(p) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((p != null) && ((p.length() > 1) && (p.length() <= 30)));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method smartclass.ui.ClassRoomUI.theProfessor regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", [spec-case]: line 113, character 28 (smartclass.ui.ClassRoomUI.java:113), and \nby method smartclass.ui.ClassRoomUI.theProfessor regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+", when \n"+"\t\'p\' is "+p;
      String evalPreErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.theProfessor regarding specifications at \n[spec-case]: line 113, character 28 (smartclass.ui.ClassRoomUI.java:113)"+", when \n"+"\t\'p\' is "+p+"\nCaused by: ";
      try {
        rac$b = ((p != null) && ((p.length() > 1) && (p.length() <= 30)));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".theProfessor(java.lang.String)");
      try {
        proceed(object$rac, p);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method smartclass.ui.ClassRoomUI.theProfessor regarding specifications at \nFile \"smartclass.ui.ClassRoomUI.java\", line 115, character 57 (smartclass.ui.ClassRoomUI.java:115), and \nby method smartclass.ui.ClassRoomUI.theProfessor regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.theProfessor regarding specifications at \nline 115, character 57 (smartclass.ui.ClassRoomUI.java:115)\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (!(object$rac.jLabel4.getIcon().toString().equals(((java.lang.Object) ("")))) && (object$rac.jLabel4.getIcon().toString() != null));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".theProfessor(java.lang.String)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.ClassRoomUI.java\" by method smartclass.ui.ClassRoomUI.theProfessor\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.ClassRoomUI.theProfessor regarding code at \nFile \"smartclass.ui.ClassRoomUI.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".theProfessor(java.lang.String)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".theProfessor(java.lang.String)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
  	}

  /** Generated by AspectJML to check non-static invariants of 
   * class ClassRoomUI. */
  after (final smartclass.ui.ClassRoomUI object$rac) :
     (execution(!static * smartclass.ui.ClassRoomUI+.*(..)) || 
       execution(smartclass.ui.ClassRoomUI+.new(..))) && 
     !execution(void smartclass.ui.ClassRoomUI.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"ClassRoomUI.java\"> regarding specifications at \nFile \"ClassRoomUI.java\", line 27, character 25 (ClassRoomUI.java:27), when \n\tnullable field 'this.time' is "+object$rac.time;
         String evalErrorMsg = "Invalid expression in \"@post <File \"ClassRoomUI.java\"> regarding specifications at \nFile \"ClassRoomUI.java\", line 27, character 25 (ClassRoomUI.java:27), when \n\tnullable field 'this.time' is "+object$rac.time+"\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((-1 <= object$rac.time) && (object$rac.time <= 3));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final smartclass.ui.ClassRoomUI object$rac): (execution( * smartclass.ui.ClassRoomUI..*+.*(..))
            || execution(smartclass.ui.ClassRoomUI..*+.new(..))
            || execution( * smartclass.ui.ClassRoomUI+.*(..))
            || execution(smartclass.ui.ClassRoomUI+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * smartclass.ui.ClassRoomUI..*+.*(..))
            || execution(smartclass.ui.ClassRoomUI..*+.new(..))
            || execution( * smartclass.ui.ClassRoomUI+.*(..))
            || execution(smartclass.ui.ClassRoomUI+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_ClassRoomUI{
    before(): (execution( * smartclass.ui.ClassRoomUI..*+.*(..))
            || execution(smartclass.ui.ClassRoomUI..*+.new(..))
            || execution( * smartclass.ui.ClassRoomUI+.*(..))
            || execution(smartclass.ui.ClassRoomUI+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
