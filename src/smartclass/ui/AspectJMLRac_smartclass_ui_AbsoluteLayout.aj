import smartclass.ui.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.util.Map;


privileged aspect AspectJMLRac_smartclass_ui_AbsoluteLayout5329e713_0634_42d7_8c50_b58d6831b1db {

 declare precedence: AspectJMLRac_*, *;










  /** Generated by AspectJML to check the exceptional postcondition of
   * method addLayoutComponent. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.lang.String name, final java.awt.Component comp) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.AbsoluteLayout.addLayoutComponent(java.lang.String, java.awt.Component))) && this(object$rac) && args(name, comp) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addLayoutComponent(java.lang.String, java.awt.Component)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.addLayoutComponent\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.addLayoutComponent regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addLayoutComponent(java.lang.String, java.awt.Component)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method removeLayoutComponent. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Component comp) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.AbsoluteLayout.removeLayoutComponent(java.awt.Component))) && this(object$rac) && args(comp) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".removeLayoutComponent(java.awt.Component)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.removeLayoutComponent\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.removeLayoutComponent regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".removeLayoutComponent(java.awt.Component)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method preferredLayoutSize. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container parent) returning (final java.awt.Dimension rac$result) :
     (execution(java.awt.Dimension smartclass.ui.AbsoluteLayout.preferredLayoutSize(java.awt.Container))) && this(object$rac) && args(parent) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.AbsoluteLayout.preferredLayoutSize regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 100 (smartclass.ui.AbsoluteLayout.java:100)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       if ((parent != null)){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".preferredLayoutSize(java.awt.Container)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method preferredLayoutSize. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container parent) throwing (Throwable rac$e) :
     (execution(java.awt.Dimension smartclass.ui.AbsoluteLayout.preferredLayoutSize(java.awt.Container))) && this(object$rac) && args(parent) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".preferredLayoutSize(java.awt.Container)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.preferredLayoutSize\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.preferredLayoutSize regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 100 (smartclass.ui.AbsoluteLayout.java:100)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".preferredLayoutSize(java.awt.Container)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method minimumLayoutSize. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container parent) returning (final java.awt.Dimension rac$result) :
     (execution(java.awt.Dimension smartclass.ui.AbsoluteLayout.minimumLayoutSize(java.awt.Container))) && this(object$rac) && args(parent) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.AbsoluteLayout.minimumLayoutSize regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 127 (smartclass.ui.AbsoluteLayout.java:127)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       if ((parent != null)){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".minimumLayoutSize(java.awt.Container)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method minimumLayoutSize. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container parent) throwing (Throwable rac$e) :
     (execution(java.awt.Dimension smartclass.ui.AbsoluteLayout.minimumLayoutSize(java.awt.Container))) && this(object$rac) && args(parent) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".minimumLayoutSize(java.awt.Container)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.minimumLayoutSize\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.minimumLayoutSize regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 127 (smartclass.ui.AbsoluteLayout.java:127)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".minimumLayoutSize(java.awt.Container)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method layoutContainer. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container parent) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.AbsoluteLayout.layoutContainer(java.awt.Container))) && this(object$rac) && args(parent) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".layoutContainer(java.awt.Container)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.layoutContainer\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.layoutContainer regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".layoutContainer(java.awt.Container)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method addLayoutComponent. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Component comp, final java.lang.Object constr) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.AbsoluteLayout.addLayoutComponent(java.awt.Component, java.lang.Object))) && this(object$rac) && args(comp, constr) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addLayoutComponent(java.awt.Component, java.lang.Object)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.addLayoutComponent\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.addLayoutComponent regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addLayoutComponent(java.awt.Component, java.lang.Object)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method maximumLayoutSize. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container target) returning (final java.awt.Dimension rac$result) :
     (execution(java.awt.Dimension smartclass.ui.AbsoluteLayout.maximumLayoutSize(java.awt.Container))) && this(object$rac) && args(target) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.AbsoluteLayout.maximumLayoutSize regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 164 (smartclass.ui.AbsoluteLayout.java:164)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       if ((target != null)){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".maximumLayoutSize(java.awt.Container)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method maximumLayoutSize. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container target) throwing (Throwable rac$e) :
     (execution(java.awt.Dimension smartclass.ui.AbsoluteLayout.maximumLayoutSize(java.awt.Container))) && this(object$rac) && args(target) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".maximumLayoutSize(java.awt.Container)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.maximumLayoutSize\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.maximumLayoutSize regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 164 (smartclass.ui.AbsoluteLayout.java:164)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".maximumLayoutSize(java.awt.Container)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getLayoutAlignmentX. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container target) throwing (Throwable rac$e) :
     (execution(float smartclass.ui.AbsoluteLayout.getLayoutAlignmentX(java.awt.Container))) && this(object$rac) && args(target) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLayoutAlignmentX(java.awt.Container)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.getLayoutAlignmentX\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.getLayoutAlignmentX regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 174 (smartclass.ui.AbsoluteLayout.java:174)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLayoutAlignmentX(java.awt.Container)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getLayoutAlignmentY. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container target) throwing (Throwable rac$e) :
     (execution(float smartclass.ui.AbsoluteLayout.getLayoutAlignmentY(java.awt.Container))) && this(object$rac) && args(target) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLayoutAlignmentY(java.awt.Container)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.getLayoutAlignmentY\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.getLayoutAlignmentY regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 184 (smartclass.ui.AbsoluteLayout.java:184)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLayoutAlignmentY(java.awt.Container)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method invalidateLayout. */
  after (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container target) throwing (Throwable rac$e) :
     (execution(void smartclass.ui.AbsoluteLayout.invalidateLayout(java.awt.Container))) && this(object$rac) && args(target) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".invalidateLayout(java.awt.Container)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteLayout.java\" by method smartclass.ui.AbsoluteLayout.invalidateLayout\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteLayout.invalidateLayout regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".invalidateLayout(java.awt.Container)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class AbsoluteLayout. */
  before (final smartclass.ui.AbsoluteLayout object$rac) :
     (execution(!static * smartclass.ui.AbsoluteLayout+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"AbsoluteLayout.java\"> regarding code at \nFile \"AbsoluteLayout.java\"\nnon_null for field 'constraints' <File \"smartclass.ui.AbsoluteLayout.java\", line 194, character 48 (smartclass.ui.AbsoluteLayout.java:194)>";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"AbsoluteLayout.java\"> regarding code at \nFile \"AbsoluteLayout.java\"\nnon_null for field 'constraints' <File \"smartclass.ui.AbsoluteLayout.java\", line 194, character 48 (smartclass.ui.AbsoluteLayout.java:194)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.constraints != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method addLayoutComponent. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.lang.String name, final java.awt.Component comp) :
     (execution(void smartclass.ui.AbsoluteLayout.addLayoutComponent(java.lang.String, java.awt.Component))) && 
     this(object$rac) && args(name, comp) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.addLayoutComponent regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+", when \n"+"\t\'name\' is "+name+"\n\t\'comp\' is "+comp+ ", when \n"+"\t\'name\' is "+name+"\n\t\'comp\' is "+comp;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((name != null) && (comp != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addLayoutComponent(java.lang.String, java.awt.Component)");

     }

  /** Generated by AspectJML to check the precondition of
   * method removeLayoutComponent. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Component comp) :
     (execution(void smartclass.ui.AbsoluteLayout.removeLayoutComponent(java.awt.Component))) && 
     this(object$rac) && args(comp) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.removeLayoutComponent regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+", when \n"+"\t\'comp\' is "+comp+ ", when \n"+"\t\'comp\' is "+comp;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (comp != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".removeLayoutComponent(java.awt.Component)");

     }

  /** Generated by AspectJML to check the precondition of
   * method preferredLayoutSize. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container parent) :
     (execution(java.awt.Dimension smartclass.ui.AbsoluteLayout.preferredLayoutSize(java.awt.Container))) && 
     this(object$rac) && args(parent) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.preferredLayoutSize regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 100 (smartclass.ui.AbsoluteLayout.java:100)"+", when \n"+"\t\'parent\' is "+parent;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (parent != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".preferredLayoutSize(java.awt.Container)");

     }

  /** Generated by AspectJML to check the precondition of
   * method minimumLayoutSize. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container parent) :
     (execution(java.awt.Dimension smartclass.ui.AbsoluteLayout.minimumLayoutSize(java.awt.Container))) && 
     this(object$rac) && args(parent) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.minimumLayoutSize regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 127 (smartclass.ui.AbsoluteLayout.java:127)"+", when \n"+"\t\'parent\' is "+parent;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (parent != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".minimumLayoutSize(java.awt.Container)");

     }

  /** Generated by AspectJML to check the precondition of
   * method layoutContainer. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container parent) :
     (execution(void smartclass.ui.AbsoluteLayout.layoutContainer(java.awt.Container))) && 
     this(object$rac) && args(parent) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.layoutContainer regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+", when \n"+"\t\'parent\' is "+parent+ ", when \n"+"\t\'parent\' is "+parent;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (parent != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".layoutContainer(java.awt.Container)");

     }

  /** Generated by AspectJML to check the precondition of
   * method addLayoutComponent. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Component comp, final java.lang.Object constr) :
     (execution(void smartclass.ui.AbsoluteLayout.addLayoutComponent(java.awt.Component, java.lang.Object))) && 
     this(object$rac) && args(comp, constr) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.addLayoutComponent regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+", when \n"+"\t\'comp\' is "+comp+"\n\t\'constr\' is "+constr+ ", when \n"+"\t\'comp\' is "+comp+"\n\t\'constr\' is "+constr;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((comp != null) && (constr != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".addLayoutComponent(java.awt.Component, java.lang.Object)");

     }

  /** Generated by AspectJML to check the precondition of
   * method maximumLayoutSize. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container target) :
     (execution(java.awt.Dimension smartclass.ui.AbsoluteLayout.maximumLayoutSize(java.awt.Container))) && 
     this(object$rac) && args(target) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.maximumLayoutSize regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 164 (smartclass.ui.AbsoluteLayout.java:164)"+", when \n"+"\t\'target\' is "+target;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (target != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".maximumLayoutSize(java.awt.Container)");

     }

  /** Generated by AspectJML to check the precondition of
   * method getLayoutAlignmentX. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container target) :
     (execution(float smartclass.ui.AbsoluteLayout.getLayoutAlignmentX(java.awt.Container))) && 
     this(object$rac) && args(target) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.getLayoutAlignmentX regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 174 (smartclass.ui.AbsoluteLayout.java:174)"+", when \n"+"\t\'target\' is "+target;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (target != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLayoutAlignmentX(java.awt.Container)");

     }

  /** Generated by AspectJML to check the precondition of
   * method getLayoutAlignmentY. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container target) :
     (execution(float smartclass.ui.AbsoluteLayout.getLayoutAlignmentY(java.awt.Container))) && 
     this(object$rac) && args(target) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.getLayoutAlignmentY regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\", line 184 (smartclass.ui.AbsoluteLayout.java:184)"+", when \n"+"\t\'target\' is "+target;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (target != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getLayoutAlignmentY(java.awt.Container)");

     }

  /** Generated by AspectJML to check the precondition of
   * method invalidateLayout. */
  before (final smartclass.ui.AbsoluteLayout object$rac, final java.awt.Container target) :
     (execution(void smartclass.ui.AbsoluteLayout.invalidateLayout(java.awt.Container))) && 
     this(object$rac) && args(target) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteLayout.invalidateLayout regarding code at \nFile \"smartclass.ui.AbsoluteLayout.java\""+", when \n"+"\t\'target\' is "+target+ ", when \n"+"\t\'target\' is "+target;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteLayout.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (target != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".invalidateLayout(java.awt.Container)");

     }


  /** Generated by AspectJML to check non-static invariants of 
   * class AbsoluteLayout. */
  after (final smartclass.ui.AbsoluteLayout object$rac) :
     (execution(!static * smartclass.ui.AbsoluteLayout+.*(..)) || 
       execution(smartclass.ui.AbsoluteLayout+.new(..))) && 
     !execution(void smartclass.ui.AbsoluteLayout.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"AbsoluteLayout.java\"> regarding code at \nFile \"AbsoluteLayout.java\"\nnon_null for field 'constraints' <File \"smartclass.ui.AbsoluteLayout.java\", line 194, character 48 (smartclass.ui.AbsoluteLayout.java:194)>";
         String evalErrorMsg = "Invalid expression in \"@post <File \"AbsoluteLayout.java\"> regarding code at \nFile \"AbsoluteLayout.java\"\nnon_null for field 'constraints' <File \"smartclass.ui.AbsoluteLayout.java\", line 194, character 48 (smartclass.ui.AbsoluteLayout.java:194)>\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = (object$rac.constraints != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final smartclass.ui.AbsoluteLayout object$rac): (execution( * smartclass.ui.AbsoluteLayout..*+.*(..))
            || execution(smartclass.ui.AbsoluteLayout..*+.new(..))
            || execution( * smartclass.ui.AbsoluteLayout+.*(..))
            || execution(smartclass.ui.AbsoluteLayout+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * smartclass.ui.AbsoluteLayout..*+.*(..))
            || execution(smartclass.ui.AbsoluteLayout..*+.new(..))
            || execution( * smartclass.ui.AbsoluteLayout+.*(..))
            || execution(smartclass.ui.AbsoluteLayout+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_AbsoluteLayout{
    before(): (execution( * smartclass.ui.AbsoluteLayout..*+.*(..))
            || execution(smartclass.ui.AbsoluteLayout..*+.new(..))
            || execution( * smartclass.ui.AbsoluteLayout+.*(..))
            || execution(smartclass.ui.AbsoluteLayout+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
