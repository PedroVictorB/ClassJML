import smartclass.ui.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.awt.Dimension;
import java.awt.Point;
import java.util.Map;


privileged aspect AspectJMLRac_smartclass_ui_AbsoluteConstraints21bbdaf2_f632_4d9a_89bc_bcf3d05d7654 {

 declare precedence: AspectJMLRac_*, *;





  /** Generated by AspectJML to check the exceptional postcondition of
   * method AbsoluteConstraints. */
  after (final smartclass.ui.AbsoluteConstraints object$rac, final Point pos) throwing (Throwable rac$e) :
     execution(smartclass.ui.AbsoluteConstraints.new( java.lang.Object )) && this(object$rac) && args(pos) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.AbsoluteConstraints.<init>(Point)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteConstraints.java\" by method smartclass.ui.AbsoluteConstraints.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteConstraints.<init> regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.AbsoluteConstraints.<init>(Point)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method AbsoluteConstraints. */
  after (final smartclass.ui.AbsoluteConstraints object$rac, final int x, final int y) throwing (Throwable rac$e) :
     execution(smartclass.ui.AbsoluteConstraints.new( int, int )) && this(object$rac) && args(x, y) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.AbsoluteConstraints.<init>(int, int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteConstraints.java\" by method smartclass.ui.AbsoluteConstraints.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteConstraints.<init> regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.AbsoluteConstraints.<init>(int, int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method AbsoluteConstraints. */
  after (final smartclass.ui.AbsoluteConstraints object$rac, final Point pos, final Dimension size) throwing (Throwable rac$e) :
     execution(smartclass.ui.AbsoluteConstraints.new( java.lang.Object, java.lang.Object )) && this(object$rac) && args(pos, size) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.AbsoluteConstraints.<init>(Point, Dimension)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteConstraints.java\" by method smartclass.ui.AbsoluteConstraints.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteConstraints.<init> regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.AbsoluteConstraints.<init>(Point, Dimension)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method AbsoluteConstraints. */
  after (final smartclass.ui.AbsoluteConstraints object$rac, final int x, final int y, final int width, final int height) throwing (Throwable rac$e) :
     execution(smartclass.ui.AbsoluteConstraints.new( int, int, int, int )) && this(object$rac) && args(x, y, width, height) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.ui.AbsoluteConstraints.<init>(int, int, int, int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteConstraints.java\" by method smartclass.ui.AbsoluteConstraints.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteConstraints.<init> regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.ui.AbsoluteConstraints.<init>(int, int, int, int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getX. */
  after (final smartclass.ui.AbsoluteConstraints object$rac) throwing (Throwable rac$e) :
     (execution(int smartclass.ui.AbsoluteConstraints.getX())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getX()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteConstraints.java\" by method smartclass.ui.AbsoluteConstraints.getX\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteConstraints.getX regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\", line 117 (smartclass.ui.AbsoluteConstraints.java:117)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getX()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getY. */
  after (final smartclass.ui.AbsoluteConstraints object$rac) throwing (Throwable rac$e) :
     (execution(int smartclass.ui.AbsoluteConstraints.getY())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getY()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteConstraints.java\" by method smartclass.ui.AbsoluteConstraints.getY\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteConstraints.getY regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\", line 122 (smartclass.ui.AbsoluteConstraints.java:122)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getY()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getWidth. */
  after (final smartclass.ui.AbsoluteConstraints object$rac) throwing (Throwable rac$e) :
     (execution(int smartclass.ui.AbsoluteConstraints.getWidth())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getWidth()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteConstraints.java\" by method smartclass.ui.AbsoluteConstraints.getWidth\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteConstraints.getWidth regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\", line 129 (smartclass.ui.AbsoluteConstraints.java:129)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getWidth()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getHeight. */
  after (final smartclass.ui.AbsoluteConstraints object$rac) throwing (Throwable rac$e) :
     (execution(int smartclass.ui.AbsoluteConstraints.getHeight())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getHeight()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteConstraints.java\" by method smartclass.ui.AbsoluteConstraints.getHeight\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteConstraints.getHeight regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\", line 136 (smartclass.ui.AbsoluteConstraints.java:136)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getHeight()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method toString. */
  after (final smartclass.ui.AbsoluteConstraints object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String smartclass.ui.AbsoluteConstraints.toString())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.ui.AbsoluteConstraints.toString regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\", line 140 (smartclass.ui.AbsoluteConstraints.java:140)";
         evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteConstraints.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".toString()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method toString. */
  after (final smartclass.ui.AbsoluteConstraints object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String smartclass.ui.AbsoluteConstraints.toString())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".toString()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.ui.AbsoluteConstraints.java\" by method smartclass.ui.AbsoluteConstraints.toString\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.ui.AbsoluteConstraints.toString regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\", line 140 (smartclass.ui.AbsoluteConstraints.java:140)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".toString()", rac$e);
  		 }
  		   }
  	 }



  /** Generated by AspectJML to check the precondition of
   * method AbsoluteConstraints. */
  before (final smartclass.ui.AbsoluteConstraints object$rac, final Point pos) :
     execution(smartclass.ui.AbsoluteConstraints.new( java.lang.Object )) && 
     this(object$rac) && args(pos) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteConstraints.<init> regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\""+", when \n"+"\t\'pos\' is "+pos+ ", when \n"+"\t\'pos\' is "+pos;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteConstraints.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (pos != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.ui.AbsoluteConstraints.<init>(Point)");

     }

  /** Generated by AspectJML to check the precondition of
   * method AbsoluteConstraints. */
  before (final smartclass.ui.AbsoluteConstraints object$rac, final Point pos, final Dimension size) :
     execution(smartclass.ui.AbsoluteConstraints.new( java.lang.Object, java.lang.Object )) && 
     this(object$rac) && args(pos, size) {
       String preErrorMsg = "by method smartclass.ui.AbsoluteConstraints.<init> regarding code at \nFile \"smartclass.ui.AbsoluteConstraints.java\""+", when \n"+"\t\'pos\' is "+pos+"\n\t\'size\' is "+size+ ", when \n"+"\t\'pos\' is "+pos+"\n\t\'size\' is "+size;
       String evalErrorMsg = "Invalid expression in \"smartclass.ui.AbsoluteConstraints.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((pos != null) && (size != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.ui.AbsoluteConstraints.<init>(Point, Dimension)");

     }



  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final smartclass.ui.AbsoluteConstraints object$rac): (execution( * smartclass.ui.AbsoluteConstraints..*+.*(..))
            || execution(smartclass.ui.AbsoluteConstraints..*+.new(..))
            || execution( * smartclass.ui.AbsoluteConstraints+.*(..))
            || execution(smartclass.ui.AbsoluteConstraints+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * smartclass.ui.AbsoluteConstraints..*+.*(..))
            || execution(smartclass.ui.AbsoluteConstraints..*+.new(..))
            || execution( * smartclass.ui.AbsoluteConstraints+.*(..))
            || execution(smartclass.ui.AbsoluteConstraints+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }
}
