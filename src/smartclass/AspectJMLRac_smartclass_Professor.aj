import smartclass.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import java.io.File;
import java.util.Map;


privileged aspect AspectJMLRac_smartclass_Professor8cfbfe2f_e7f1_4d0b_8261_38ca8d5fc9a7 {

 declare precedence: AspectJMLRac_*, *;








  /** Generated by AspectJML to check the exceptional postcondition of
   * method Professor. */
  after (final smartclass.Professor object$rac, final java.lang.String name, final java.lang.Short temperature, final int time, final java.io.File slides) throwing (Throwable rac$e) :
     execution(smartclass.Professor.new( java.lang.String, java.lang.Short, int, java.io.File )) && this(object$rac) && args(name, temperature, time, slides) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.Professor.<init>(java.lang.String, java.lang.Short, int, java.io.File)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.Professor.java\" by method smartclass.Professor.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.Professor.<init> regarding code at \nFile \"smartclass.Professor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.Professor.<init>(java.lang.String, java.lang.Short, int, java.io.File)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getName. */
  after (final smartclass.Professor object$rac) returning (final java.lang.String rac$result) :
     (execution(java.lang.String smartclass.Professor.getName())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.Professor.getName regarding specifications at \nFile \"smartclass.Professor.java\", line 27, character 37 (smartclass.Professor.java:27), and \nby method smartclass.Professor.getName regarding code at \nFile \"smartclass.Professor.java\", line 30 (smartclass.Professor.java:30)";
         evalErrorMsg = "Invalid expression in \"smartclass.Professor.java\" by method smartclass.Professor.getName regarding specifications at \nline 27, character 37 (smartclass.Professor.java:27)\nCaused by: ";
       if (true){
         try {
           rac$b = ((rac$result != null) && object$rac.name.equals(((java.lang.Object) ("pedro"))));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getName()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getName. */
  after (final smartclass.Professor object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.String smartclass.Professor.getName())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getName()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.Professor.java\" by method smartclass.Professor.getName\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.Professor.getName regarding code at \nFile \"smartclass.Professor.java\", line 30 (smartclass.Professor.java:30)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getName()", rac$e);
  		 }
  		   }
  	 }

  /** Generated by AspectJML to check the normal postcondition of
   * method getTemperature. */
  after (final smartclass.Professor object$rac) returning (final java.lang.Short rac$result) :
     (execution(java.lang.Short smartclass.Professor.getTemperature())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.Professor.getTemperature regarding code at \nFile \"smartclass.Professor.java\", line 45 (smartclass.Professor.java:45)";
         evalErrorMsg = "Invalid expression in \"smartclass.Professor.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getTemperature()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getTemperature. */
  after (final smartclass.Professor object$rac) throwing (Throwable rac$e) :
     (execution(java.lang.Short smartclass.Professor.getTemperature())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getTemperature()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.Professor.java\" by method smartclass.Professor.getTemperature\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.Professor.getTemperature regarding code at \nFile \"smartclass.Professor.java\", line 45 (smartclass.Professor.java:45)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getTemperature()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setTemperature. */
  after (final smartclass.Professor object$rac, final java.lang.Short temperature) throwing (Throwable rac$e) :
     (execution(void smartclass.Professor.setTemperature(java.lang.Short))) && this(object$rac) && args(temperature) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTemperature(java.lang.Short)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.Professor.java\" by method smartclass.Professor.setTemperature\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.Professor.setTemperature regarding code at \nFile \"smartclass.Professor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTemperature(java.lang.Short)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method getTime. */
  after (final smartclass.Professor object$rac) throwing (Throwable rac$e) :
     (execution(int smartclass.Professor.getTime())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getTime()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.Professor.java\" by method smartclass.Professor.getTime\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.Professor.getTime regarding code at \nFile \"smartclass.Professor.java\", line 59 (smartclass.Professor.java:59)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getTime()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setTime. */
  after (final smartclass.Professor object$rac, final int time) throwing (Throwable rac$e) :
     (execution(void smartclass.Professor.setTime(int))) && this(object$rac) && args(time) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTime(int)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.Professor.java\" by method smartclass.Professor.setTime\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.Professor.setTime regarding code at \nFile \"smartclass.Professor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTime(int)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method getSlides. */
  after (final smartclass.Professor object$rac) returning (final java.io.File rac$result) :
     (execution(java.io.File smartclass.Professor.getSlides())) && this(object$rac) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.Professor.getSlides regarding code at \nFile \"smartclass.Professor.java\", line 73 (smartclass.Professor.java:73)";
         evalErrorMsg = "Invalid expression in \"smartclass.Professor.java\"\nCaused by: ";
       if (true){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getSlides()");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method getSlides. */
  after (final smartclass.Professor object$rac) throwing (Throwable rac$e) :
     (execution(java.io.File smartclass.Professor.getSlides())) && this(object$rac) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getSlides()");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.Professor.java\" by method smartclass.Professor.getSlides\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.Professor.getSlides regarding code at \nFile \"smartclass.Professor.java\", line 73 (smartclass.Professor.java:73)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getSlides()", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method setSlides. */
  after (final smartclass.Professor object$rac, final java.io.File slides) throwing (Throwable rac$e) :
     (execution(void smartclass.Professor.setSlides(java.io.File))) && this(object$rac) && args(slides) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setSlides(java.io.File)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.Professor.java\" by method smartclass.Professor.setSlides\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.Professor.setSlides regarding code at \nFile \"smartclass.Professor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setSlides(java.io.File)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check non-static invariants of 
   * class Professor. */
  before (final smartclass.Professor object$rac) :
     (execution(!static * smartclass.Professor+.*(..))) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
         String invErrorMsg = "@pre <File \"Professor.java\"> regarding code at \nFile \"Professor.java\"\nnon_null for field 'name' <File \"smartclass.Professor.java\", line 15, character 45 (smartclass.Professor.java:15)>\nnon_null for field 'temperature' <File \"smartclass.Professor.java\", line 16, character 51 (smartclass.Professor.java:16)>\n\n";
         String evalErrorMsg = "Invalid expression in \"@pre <File \"Professor.java\"> regarding code at \nFile \"Professor.java\"\nnon_null for field 'name' <File \"smartclass.Professor.java\", line 15, character 45 (smartclass.Professor.java:15)>\nnon_null for field 'temperature' <File \"smartclass.Professor.java\", line 16, character 51 (smartclass.Professor.java:16)>\n\n\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((object$rac.temperature != null) && (object$rac.name != null));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
             throw (JMLAssertionError) rac$cause;
            }
            else {
             throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
       JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

     }

  /** Generated by AspectJML to check the precondition of
   * method Professor. */
  before (final smartclass.Professor object$rac, final java.lang.String name, final java.lang.Short temperature, final int time, final java.io.File slides) :
     execution(smartclass.Professor.new( java.lang.String, java.lang.Short, int, java.io.File )) && 
     this(object$rac) && args(name, temperature, time, slides) {
       String preErrorMsg = "by method smartclass.Professor.<init> regarding code at \nFile \"smartclass.Professor.java\""+", when \n"+"\t\'name\' is "+name+"\n\t\'temperature\' is "+temperature+ ", when \n"+"\t\'name\' is "+name+"\n\t\'temperature\' is "+temperature;
       String evalErrorMsg = "Invalid expression in \"smartclass.Professor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((name != null) && (temperature != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.Professor.<init>(java.lang.String, java.lang.Short, int, java.io.File)");

     }

  /** Generated by AspectJML to check the precondition of
   * method getName. */
  before (final smartclass.Professor object$rac) :
     (execution(java.lang.String smartclass.Professor.getName())) && 
     this(object$rac) {
       String preErrorMsg = "by method smartclass.Professor.getName regarding specifications at \nFile \"smartclass.Professor.java\", [spec-case]: line 27, character 16 (smartclass.Professor.java:27), and \nby method smartclass.Professor.getName regarding code at \nFile \"smartclass.Professor.java\", line 30 (smartclass.Professor.java:30)";
       String evalErrorMsg = "Invalid expression in \"smartclass.Professor.java\" by method smartclass.Professor.getName regarding specifications at \n[spec-case]: line 27, character 16 (smartclass.Professor.java:27)\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (true);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".getName()");

     }

  /** Generated by AspectJML to check the precondition of
   * method setTemperature. */
  before (final smartclass.Professor object$rac, final java.lang.Short temperature) :
     (execution(void smartclass.Professor.setTemperature(java.lang.Short))) && 
     this(object$rac) && args(temperature) {
       String preErrorMsg = "by method smartclass.Professor.setTemperature regarding code at \nFile \"smartclass.Professor.java\""+", when \n"+"\t\'temperature\' is "+temperature+ ", when \n"+"\t\'temperature\' is "+temperature;
       String evalErrorMsg = "Invalid expression in \"smartclass.Professor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (temperature != null);
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setTemperature(java.lang.Short)");

     }


  /** Generated by AspectJML to check the precondition, normal and
   * exceptional postcondition of method setName. */
  void around (final smartclass.Professor object$rac, final java.lang.String name) :
     (execution(void smartclass.Professor.setName(java.lang.String)))
     && this(object$rac) && args(name) {
      boolean rac$b = true;
      boolean rac$pre0;
      try {
        // saving pre-expressions and precondition related old vars
  		rac$pre0 = ((name != null) && ((0 <= name.length()) && (name.length() <= 15)));
       } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError("" + rac$cause);
            }
       }
      String preErrorMsg = "by method smartclass.Professor.setName regarding specifications at \nFile \"smartclass.Professor.java\", [spec-case]: line 33, character 18 (smartclass.Professor.java:33), and \nby method smartclass.Professor.setName regarding code at \nFile \"smartclass.Professor.java\""+", when \n"+"\t\'name\' is "+name;
      String evalPreErrorMsg = "Invalid expression in \"smartclass.Professor.java\" by method smartclass.Professor.setName regarding specifications at \n[spec-case]: line 33, character 18 (smartclass.Professor.java:33)"+", when \n"+"\t\'name\' is "+name+"\nCaused by: ";
      try {
        rac$b = ((name != null) && ((0 <= name.length()) && (name.length() <= 15)));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalPreErrorMsg + rac$cause);
          }
       }
       boolean canThrow = false;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setName(java.lang.String)");
      try {
        proceed(object$rac, name);//executing the method
        String nPostErrorMsg =  "";
        String evalErrorMsg = "";
         nPostErrorMsg =  "by method smartclass.Professor.setName regarding specifications at \nFile \"smartclass.Professor.java\", line 35, character 30 (smartclass.Professor.java:35), and \nby method smartclass.Professor.setName regarding code at \nFile \"smartclass.Professor.java\"";
         evalErrorMsg = "Invalid expression in \"smartclass.Professor.java\" by method smartclass.Professor.setName regarding specifications at \nline 35, character 30 (smartclass.Professor.java:35)\nCaused by: ";
       if (rac$pre0){
         try {
           rac$b = (name.length() >= 0);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setName(java.lang.String)");
       }
      } catch (Throwable rac$e) {
           rac$b = true;
           String rac$ErrorMsg = "";

  		   if (rac$b && rac$pre0) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.Professor.java\" by method smartclass.Professor.setName\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.Professor.setName regarding code at \nFile \"smartclass.Professor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setName(java.lang.String)", rac$e);
  		 }
  		   }
           if(JMLChecker.hasAnyJMLError){
            JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".setName(java.lang.String)");
           }
           if(!JMLChecker.hasAnyJMLError) {
  			 JMLChecker.rethrowUncheckedException(rac$e);
  		   }
  			 throw new JMLSoftException(rac$e);
  		}
  	}

  /** Generated by AspectJML to check non-static invariants of 
   * class Professor. */
  after (final smartclass.Professor object$rac) :
     (execution(!static * smartclass.Professor+.*(..)) || 
       execution(smartclass.Professor+.new(..))) && 
     !execution(void smartclass.Professor.finalize() throws Throwable) && 
     !@annotation(JMLHelper) && 
     this(object$rac) {
       if (!(JMLChecker.hasAnyJMLError)) {
         String invErrorMsg = "@post <File \"Professor.java\"> regarding code at \nFile \"Professor.java\"\nnon_null for field 'name' <File \"smartclass.Professor.java\", line 15, character 45 (smartclass.Professor.java:15)>\nnon_null for field 'temperature' <File \"smartclass.Professor.java\", line 16, character 51 (smartclass.Professor.java:16)>\n\n";
         String evalErrorMsg = "Invalid expression in \"@post <File \"Professor.java\"> regarding code at \nFile \"Professor.java\"\nnon_null for field 'name' <File \"smartclass.Professor.java\", line 15, character 45 (smartclass.Professor.java:15)>\nnon_null for field 'temperature' <File \"smartclass.Professor.java\", line 16, character 51 (smartclass.Professor.java:16)>\n\n\nCaused by: ";
         boolean rac$b = true;
         try {
          rac$b = ((object$rac.temperature != null) && (object$rac.name != null));
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
         }
         JMLChecker.checkInvariant(rac$b, invErrorMsg, -1);

       }
     }

  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final smartclass.Professor object$rac): (execution( * smartclass.Professor..*+.*(..))
            || execution(smartclass.Professor..*+.new(..))
            || execution( * smartclass.Professor+.*(..))
            || execution(smartclass.Professor+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * smartclass.Professor..*+.*(..))
            || execution(smartclass.Professor..*+.new(..))
            || execution( * smartclass.Professor+.*(..))
            || execution(smartclass.Professor+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_Professor{
    before(): (execution( * smartclass.Professor..*+.*(..))
            || execution(smartclass.Professor..*+.new(..))
            || execution( * smartclass.Professor+.*(..))
            || execution(smartclass.Professor+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
