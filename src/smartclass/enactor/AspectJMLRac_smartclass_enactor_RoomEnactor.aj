import smartclass.enactor.*;
import org.jmlspecs.ajmlrac.runtime.*;
import org.jmlspecs.lang.annotation.*;
import context.arch.discoverer.ComponentDescription;
import context.arch.discoverer.component.NonConstantAttributeElement;
import context.arch.discoverer.query.AbstractQueryItem;
import context.arch.discoverer.query.ElseQueryItem;
import context.arch.discoverer.query.ORQueryItem;
import context.arch.discoverer.query.RuleQueryItem;
import context.arch.discoverer.query.comparison.AttributeComparison;
import context.arch.enactor.Enactor;
import context.arch.enactor.EnactorReference;
import context.arch.service.helper.ServiceInput;
import context.arch.storage.AttributeNameValue;
import context.arch.storage.Attributes;
import context.arch.widget.Widget;
import java.util.Map;


privileged aspect AspectJMLRac_smartclass_enactor_RoomEnactor9d342ada_8aea_4e27_9c44_35fc357c847d {

 declare precedence: AspectJMLRac_*, *;
   
   
   
   
   
  /** Generated by AspectJML to check the exceptional postcondition of
   * method RoomEnactor. */
  after (final smartclass.enactor.RoomEnactor object$rac, final context.arch.discoverer.query.AbstractQueryItem inWidgetSubscriptionQuery, final context.arch.discoverer.query.AbstractQueryItem outWidgetSubscriptionQuery, final java.lang.String outcomeName, final java.lang.String shortId, final java.lang.String type) throwing (Throwable rac$e) :
     execution(smartclass.enactor.RoomEnactor.new( context.arch.discoverer.query.AbstractQueryItem, context.arch.discoverer.query.AbstractQueryItem, java.lang.String, java.lang.String, java.lang.String )) && this(object$rac) && args(inWidgetSubscriptionQuery, outWidgetSubscriptionQuery, outcomeName, shortId, type) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.enactor.RoomEnactor.<init>(context.arch.discoverer.query.AbstractQueryItem, context.arch.discoverer.query.AbstractQueryItem, java.lang.String, java.lang.String, java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.enactor.RoomEnactor.<init>(context.arch.discoverer.query.AbstractQueryItem, context.arch.discoverer.query.AbstractQueryItem, java.lang.String, java.lang.String, java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method RoomEnactorLightReference. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorLightReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) throwing (Throwable rac$e) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorLightReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && this(object$rac) && args(conditionQuery, outcomeValue) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.enactor.RoomEnactor$RoomEnactorLightReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorLightReference.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorLightReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.enactor.RoomEnactor$RoomEnactorLightReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorLightReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) returning (final context.arch.storage.Attributes rac$result) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorLightReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.enactor.RoomEnactor$RoomEnactorLightReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 257 (smartclass.enactor.RoomEnactor.java:257)";
         evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       if (((inWidgetState != null) && (outAtts != null))){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorLightReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) throwing (Throwable rac$e) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorLightReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorLightReference.conditionSatisfied\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorLightReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 257 (smartclass.enactor.RoomEnactor.java:257)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method RoomEnactorProjectorReference. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorProjectorReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) throwing (Throwable rac$e) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorProjectorReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && this(object$rac) && args(conditionQuery, outcomeValue) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorProjectorReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) returning (final context.arch.storage.Attributes rac$result) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 282 (smartclass.enactor.RoomEnactor.java:282)";
         evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       if (((inWidgetState != null) && (outAtts != null))){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorProjectorReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) throwing (Throwable rac$e) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.conditionSatisfied\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 282 (smartclass.enactor.RoomEnactor.java:282)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method RoomEnactorComputerReference. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorComputerReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) throwing (Throwable rac$e) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorComputerReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && this(object$rac) && args(conditionQuery, outcomeValue) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorComputerReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) returning (final context.arch.storage.Attributes rac$result) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 308 (smartclass.enactor.RoomEnactor.java:308)";
         evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       if (((inWidgetState != null) && (outAtts != null))){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorComputerReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) throwing (Throwable rac$e) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.conditionSatisfied\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 308 (smartclass.enactor.RoomEnactor.java:308)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method RoomEnactorAirReference. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorAirReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) throwing (Throwable rac$e) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorAirReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && this(object$rac) && args(conditionQuery, outcomeValue) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.enactor.RoomEnactor$RoomEnactorAirReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorAirReference.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorAirReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.enactor.RoomEnactor$RoomEnactorAirReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorAirReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) returning (final context.arch.storage.Attributes rac$result) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorAirReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.enactor.RoomEnactor$RoomEnactorAirReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 335 (smartclass.enactor.RoomEnactor.java:335)";
         evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       if (((inWidgetState != null) && (outAtts != null))){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorAirReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) throwing (Throwable rac$e) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorAirReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorAirReference.conditionSatisfied\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorAirReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 335 (smartclass.enactor.RoomEnactor.java:335)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the exceptional postcondition of
   * method RoomEnactorProfessorReference. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorProfessorReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) throwing (Throwable rac$e) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorProfessorReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && this(object$rac) && args(conditionQuery, outcomeValue) {
           JMLChecker.rethrowJMLAssertionError(rac$e, "smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.<init>\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, "smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)", rac$e);
  		 }
  		   }
  	 }


  /** Generated by AspectJML to check the normal postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorProfessorReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) returning (final context.arch.storage.Attributes rac$result) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
       String nPostErrorMsg =  "";
       String evalErrorMsg = "";
       boolean rac$b = true;
         nPostErrorMsg =  "by method smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 356 (smartclass.enactor.RoomEnactor.java:356)";
         evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       if (((inWidgetState != null) && (outAtts != null))){
         try {
           rac$b = (rac$result != null);
         } catch (JMLNonExecutableException rac$nonExec) {
            rac$b = false;
         } catch (Throwable rac$cause) {
            if(rac$cause instanceof JMLAssertionError) {
              throw (JMLAssertionError) rac$cause;
            }
            else {
              throw new JMLEvaluationError(evalErrorMsg + rac$cause);
            }
         }
        JMLChecker.checkNormalPostcondition(rac$b, nPostErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
       }

     }

  /** Generated by AspectJML to check the exceptional postcondition of
   * method conditionSatisfied. */
  after (final smartclass.enactor.RoomEnactor.RoomEnactorProfessorReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) throwing (Throwable rac$e) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && this(object$rac) && args(inWidgetState, outAtts) {
           JMLChecker.rethrowJMLAssertionError(rac$e, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");
           boolean rac$b = true;
           String rac$ErrorMsg = "";

  		   if (true) {
  		     if (rac$e instanceof java.lang.RuntimeException) {
  			   java.lang.RuntimeException jml$ex = (java.lang.RuntimeException) rac$e;
  			   boolean rac$b0 = true;
  			   try{			     
  			     rac$b0 = true;
  			   }   catch (JMLNonExecutableException rac$nonExec) {
  			     throw new JMLEvaluationError("Invalid Expression in \"smartclass.enactor.RoomEnactor.java\" by method smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.conditionSatisfied\nCaused by: "+rac$e);
  			   }
  			   if(!rac$b0) {
  			     if(rac$ErrorMsg.equals("")) {
  			       rac$ErrorMsg = "jml$ex";
  			     }
  			     else {
  			       rac$ErrorMsg += " and jml$ex";
  			     }
  			   }
  			   rac$b = rac$b && rac$b0;
           if(rac$ErrorMsg.indexOf("and") >= 0 ){
             rac$ErrorMsg += " are ";
           }
           else{
             rac$ErrorMsg += " is ";
           }
               JMLChecker.checkExceptionalPostcondition(rac$b,"by method smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 356 (smartclass.enactor.RoomEnactor.java:356)"+"\n\t"+rac$ErrorMsg+rac$e, "jml$ex", true, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)", rac$e);
  		 }
  		   }
  	 }








  /** Generated by AspectJML to check the precondition of
   * method RoomEnactor. */
  before (final smartclass.enactor.RoomEnactor object$rac, final context.arch.discoverer.query.AbstractQueryItem inWidgetSubscriptionQuery, final context.arch.discoverer.query.AbstractQueryItem outWidgetSubscriptionQuery, final java.lang.String outcomeName, final java.lang.String shortId, final java.lang.String type) :
     execution(smartclass.enactor.RoomEnactor.new( context.arch.discoverer.query.AbstractQueryItem, context.arch.discoverer.query.AbstractQueryItem, java.lang.String, java.lang.String, java.lang.String )) && 
     this(object$rac) && args(inWidgetSubscriptionQuery, outWidgetSubscriptionQuery, outcomeName, shortId, type) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+", when \n"+"\t\'inWidgetSubscriptionQuery\' is "+inWidgetSubscriptionQuery+"\n\t\'outWidgetSubscriptionQuery\' is "+outWidgetSubscriptionQuery+"\n\t\'outcomeName\' is "+outcomeName+"\n\t\'shortId\' is "+shortId+"\n\t\'type\' is "+type+ ", when \n"+"\t\'inWidgetSubscriptionQuery\' is "+inWidgetSubscriptionQuery+"\n\t\'outWidgetSubscriptionQuery\' is "+outWidgetSubscriptionQuery+"\n\t\'outcomeName\' is "+outcomeName+"\n\t\'shortId\' is "+shortId+"\n\t\'type\' is "+type;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = (((((inWidgetSubscriptionQuery != null) && (outWidgetSubscriptionQuery != null)) && (outcomeName != null)) && (shortId != null)) && (type != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.enactor.RoomEnactor.<init>(context.arch.discoverer.query.AbstractQueryItem, context.arch.discoverer.query.AbstractQueryItem, java.lang.String, java.lang.String, java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method RoomEnactorLightReference. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorLightReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorLightReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && 
     this(object$rac) && args(conditionQuery, outcomeValue) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorLightReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue+ ", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((conditionQuery != null) && (outcomeValue != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.enactor.RoomEnactor$RoomEnactorLightReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method conditionSatisfied. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorLightReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorLightReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && 
     this(object$rac) && args(inWidgetState, outAtts) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorLightReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 257 (smartclass.enactor.RoomEnactor.java:257)"+", when \n"+"\t\'inWidgetState\' is "+inWidgetState+"\n\t\'outAtts\' is "+outAtts;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((inWidgetState != null) && (outAtts != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");

     }

  /** Generated by AspectJML to check the precondition of
   * method RoomEnactorProjectorReference. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorProjectorReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorProjectorReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && 
     this(object$rac) && args(conditionQuery, outcomeValue) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue+ ", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((conditionQuery != null) && (outcomeValue != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method conditionSatisfied. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorProjectorReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && 
     this(object$rac) && args(inWidgetState, outAtts) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorProjectorReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 282 (smartclass.enactor.RoomEnactor.java:282)"+", when \n"+"\t\'inWidgetState\' is "+inWidgetState+"\n\t\'outAtts\' is "+outAtts;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((inWidgetState != null) && (outAtts != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");

     }

  /** Generated by AspectJML to check the precondition of
   * method RoomEnactorComputerReference. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorComputerReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorComputerReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && 
     this(object$rac) && args(conditionQuery, outcomeValue) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue+ ", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((conditionQuery != null) && (outcomeValue != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method conditionSatisfied. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorComputerReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && 
     this(object$rac) && args(inWidgetState, outAtts) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorComputerReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 308 (smartclass.enactor.RoomEnactor.java:308)"+", when \n"+"\t\'inWidgetState\' is "+inWidgetState+"\n\t\'outAtts\' is "+outAtts;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((inWidgetState != null) && (outAtts != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");

     }

  /** Generated by AspectJML to check the precondition of
   * method RoomEnactorAirReference. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorAirReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorAirReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && 
     this(object$rac) && args(conditionQuery, outcomeValue) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorAirReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue+ ", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((conditionQuery != null) && (outcomeValue != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.enactor.RoomEnactor$RoomEnactorAirReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method conditionSatisfied. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorAirReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorAirReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && 
     this(object$rac) && args(inWidgetState, outAtts) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorAirReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 335 (smartclass.enactor.RoomEnactor.java:335)"+", when \n"+"\t\'inWidgetState\' is "+inWidgetState+"\n\t\'outAtts\' is "+outAtts;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((inWidgetState != null) && (outAtts != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");

     }

  /** Generated by AspectJML to check the precondition of
   * method RoomEnactorProfessorReference. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorProfessorReference object$rac, final context.arch.discoverer.query.AbstractQueryItem conditionQuery, final java.lang.String outcomeValue) :
     execution(smartclass.enactor.RoomEnactor.RoomEnactorProfessorReference.new( context.arch.discoverer.query.AbstractQueryItem, java.lang.String )) && 
     this(object$rac) && args(conditionQuery, outcomeValue) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.<init> regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\""+", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue+ ", when \n"+"\t\'conditionQuery\' is "+conditionQuery+"\n\t\'outcomeValue\' is "+outcomeValue;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((conditionQuery != null) && (outcomeValue != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, "smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.<init>(, context.arch.discoverer.query.AbstractQueryItem, java.lang.String)");

     }

  /** Generated by AspectJML to check the precondition of
   * method conditionSatisfied. */
  before (final smartclass.enactor.RoomEnactor.RoomEnactorProfessorReference object$rac, final context.arch.discoverer.ComponentDescription inWidgetState, final context.arch.storage.Attributes outAtts) :
     (execution(context.arch.storage.Attributes smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes))) && 
     this(object$rac) && args(inWidgetState, outAtts) {
       String preErrorMsg = "by method smartclass.enactor.RoomEnactor$RoomEnactorProfessorReference.conditionSatisfied regarding code at \nFile \"smartclass.enactor.RoomEnactor.java\", line 356 (smartclass.enactor.RoomEnactor.java:356)"+", when \n"+"\t\'inWidgetState\' is "+inWidgetState+"\n\t\'outAtts\' is "+outAtts;
       String evalErrorMsg = "Invalid expression in \"smartclass.enactor.RoomEnactor.java\"\nCaused by: ";
       boolean rac$b = true;
       try {
        rac$b = ((inWidgetState != null) && (outAtts != null));
       } catch (JMLNonExecutableException rac$nonExec) {
          rac$b = false;
       } catch (Throwable rac$cause) {
          if(rac$cause instanceof JMLAssertionError) {
            throw (JMLAssertionError) rac$cause;
          }
          else {
            throw new JMLEvaluationError(evalErrorMsg + rac$cause);
          }
       }
       boolean canThrow = true;
       JMLChecker.checkPrecondition(rac$b, canThrow, preErrorMsg, -1, object$rac.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(object$rac))+".conditionSatisfied(context.arch.discoverer.ComponentDescription, context.arch.storage.Attributes)");

     }













  /** Generated by AspectJML to enable modular signals_only checking (XCS enabled) */
    after(final smartclass.enactor.RoomEnactor object$rac): (execution( * smartclass.enactor.RoomEnactor..*+.*(..))
            || execution(smartclass.enactor.RoomEnactor..*+.new(..))
            || execution( * smartclass.enactor.RoomEnactor+.*(..))
            || execution(smartclass.enactor.RoomEnactor+.new(..))) && 
     this(object$rac) {
     JMLChecker.hasAnyThrownExceptionalPostconditionSignalsOnly();
    }

  /** Generated by AspectJML to enhance error reporting (Execution Site enabled) */
    after() throwing (Throwable rac$e): (execution( * smartclass.enactor.RoomEnactor..*+.*(..))
            || execution(smartclass.enactor.RoomEnactor..*+.new(..))
            || execution( * smartclass.enactor.RoomEnactor+.*(..))
            || execution(smartclass.enactor.RoomEnactor+.new(..))){
      JMLChecker.hideAjmlSpecificStackTrace(rac$e);
    }

  /** Generated by AspectJML to enhance precondition checking */
  public static aspect UtilPreconditionChecking_RoomEnactor{
    before(): (execution( * smartclass.enactor.RoomEnactor..*+.*(..))
            || execution(smartclass.enactor.RoomEnactor..*+.new(..))
            || execution( * smartclass.enactor.RoomEnactor+.*(..))
            || execution(smartclass.enactor.RoomEnactor+.new(..))){
      JMLChecker.hasAnyThrownPrecondition();
    }
  }
}
